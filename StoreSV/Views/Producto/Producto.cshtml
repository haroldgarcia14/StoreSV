@model IEnumerable<StoreSV.Models.Producto>
@{
    ViewBag.Title = "Producto";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<button type="button" class="btn btn-success m-2" data-toggle="modal" onclick="abrirModal('Create',0)" data-target="#FormModal">Ingresar Productos</button>

<div class="container-fluid pt-4 px-4">
    <div class="col-12">
        <div class="bg-secondary rounded h-100 p-4">
            <h6 class="mb-4">Productos</h6>
            <div class="table-responsive">
                <table id="tabla2" class="table">
                    <thead>
                        <tr>
                            <th scope="col">Nombre</th>
                            <th scope="col">Categoria</th>
                            <th scope="col">Marca</th>
                            <th scope="col">Precio</th>
                            <th scope="col">Stock</th>
                            <th scope="col">Imagen</th>
                            <th scope="col">Activo</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody id="tablaBody">
                        @if (!Model.Any())
                        {
                            <tr><td colspan="8">No hay productos para mostrar.</td></tr>
                        }
                        else
                        {
                            foreach (var item in Model)
                            {
                                <tr id="row-@item.IdProducto">
                                    <td>@item.Nombre</td>
                                    <td>@item.categoria.Descripcion</td>
                                    <td>@item.marca.Descripcion</td>
                                    <td>@item.Precio</td>
                                    <td>@item.Stock</td>
                                    <td>
                                        <img src="@item.RutaImagen" alt="@item.NombreImagen" width="100" />
                                    </td>
                                    <td>
                                        @if (item.Activo)
                                        {
                                            <span class="badge bg-success">Si</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">No</span>
                                        }
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-editar" data-id="@item.IdProducto" data-toggle="modal" data-target="#FormModal" onclick="abrirModal('Edit',@item.IdProducto)"><i class="fas fa-pen"></i></button>
                                        <button type="button" class="btn btn-danger btn-sm ms-2 btn-eliminar" data-id="@item.IdProducto"><i class="fas fa-trash"></i></button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="FormModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            @using (Html.BeginForm("CreateAndEditProduct", "Producto", FormMethod.Post, new { role = "form", id = "ProductoForm", enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()

                <div class="modal-header color-cabecera text-white">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Productos</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })
                    @Html.HiddenFor(model => model.FirstOrDefault().IdProducto, new { id = "txtid" })

                    <div class="row g-2">
                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.FirstOrDefault().Nombre, htmlAttributes: new { @class = "form-label" })
                            @Html.EditorFor(model => model.FirstOrDefault().Nombre, new { htmlAttributes = new { @class = "form-control", id = "txtnombre", placeholder = "", required = "required" } })
                            @Html.ValidationMessageFor(model => model.FirstOrDefault().Nombre, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.FirstOrDefault().IdCategoria, htmlAttributes: new { @class = "form-label" })
                            @Html.DropDownList("IdCategoria", (SelectList)ViewBag.Categorias, "Seleccione una categoria", new { @class = "form-select", id = "cbocategoria", placeholder = "Seleccione categoria", required = "required" })
                        </div>

                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.FirstOrDefault().IdMarca, htmlAttributes: new { @class = "form-label" })
                            @Html.DropDownList("IdMarca", (SelectList)ViewBag.Marcas, "Seleccione una marca", new { @class = "form-select", id = "cbomarca", required = "required" })
                        </div>

                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.FirstOrDefault().Precio, htmlAttributes: new { @class = "form-label" })
                            @Html.EditorFor(model => model.FirstOrDefault().Precio, new { htmlAttributes = new { @class = "form-control", id = "txtprecio", placeholder = "", required = "required", type = "number", step = "0.01" } })
                            @Html.ValidationMessageFor(model => model.FirstOrDefault().Precio, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.FirstOrDefault().Stock, htmlAttributes: new { @class = "form-label" })
                            @Html.EditorFor(model => model.FirstOrDefault().Stock, new { htmlAttributes = new { @class = "form-control", id = "txtstock", placeholder = "", required = "required", type = "number", step = "1" } })
                            @Html.ValidationMessageFor(model => model.FirstOrDefault().Stock, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.FirstOrDefault().RutaImagen, htmlAttributes: new { @class = "form-label" })
                            <input type="file" class="form-control" id="imagen" name="imagen" accept="image/*" onchange="return validarArchivo();" />
                        </div>

                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.FirstOrDefault().NombreImagen, htmlAttributes: new { @class = "form-label" })

                            @Html.EditorFor(model => model.FirstOrDefault().NombreImagen, new { htmlAttributes = new { @class = "form-control", id = "txtnombreimagen", placeholder = "", required = "required" } })
                            @Html.ValidationMessageFor(model => model.FirstOrDefault().NombreImagen, "", new { @class = "text-danger" })

                        </div>

                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.FirstOrDefault().Activo, htmlAttributes: new { @class = "form-label" })
                            @Html.DropDownListFor(model => model.FirstOrDefault().Activo, new List<SelectListItem>
                            {
                                new SelectListItem {Value = "true", Text = "Si"},
                                new SelectListItem {Value = "false", Text = "No"}
                            },
                            htmlAttributes: new { @class = "form-select", id = "cboactivo", placeholder = "Seleccione una opcion", required = "required" })
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary m-2" data-bs-dismiss="modal">Cerrar</button>
                    <button type="submit" class="btn btn-info m-2" >Guardar</button>
                </div>
            }
        </div>
    </div>
</div>

@section scripts{
    <script>
        function abrirModal(accion, userId) {
            debugger
            if (accion === 'Edit') {
                console.log("activaste el edit")
                // Aquí puedes agregar la lógica para cargar los datos del producto a editar
                fetch(`@Url.Action("GetProducto","Producto")?id=${userId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                    .then(respuesta => {
                        if (!respuesta.ok) {
                            throw new Error("Error en la solicitud GET");
                        }
                        return respuesta.json();
                    })
                    .then(respuesta => {
                        if (respuesta.success) {
                            //ver la data
                            console.log(respuesta);

                            //campos
                            $('#txtid').val(respuesta.data.IdProducto);
                            $('#txtnombre').val(respuesta.data.Nombre);
                            $('#cbocategoria').val(respuesta.data.IdCategoria);
                            $('#cbomarca').val(respuesta.data.IdMarca);
                            $('#txtprecio').val(respuesta.data.Precio);
                            $('#txtstock').val(respuesta.data.Stock);
                            $('#txtnombreimagen').val(respuesta.data.NombreImagen);
                            $('#cboactivo').val(respuesta.data.Activo ? 'true' : 'false');
                            $("#FormModal").modal("show");
                        } else {
                            console.log(respuesta.message);
                            alert(respuesta.message);
                        }
                    })
                    .catch(error => {
                        console.error("Error en la solicitud fetch: ", error);
                    })
            } else {
                $("#txtid").val(0);
                $("#txtnombre").val("");
                $("#cbocategoria").val("");
                $("#cbomarca").val("");
                $("#txtprecio").val(0);
                $("#txtstock").val(0);
                //$("#imagen").val("");
                $('#txtnombreimagen').val("");
                $("#cboactivo").val("true");

                $("#FormModal").modal("show");
            }
        }
        /*
        function validarArchivo() {
            var archivo = document.getElementById("imagen");
            var tamanoMaximo = 5 * 1024 * 1024; //5mb

            if (archivo.files.length > 0) {
                if (archivo.files[0].size > tamanoMaximo) {
                    alert("El archivo es demasiado grande. El tamaño máximo permitido es 5 MB.");
                    archivo.value = ""; //limpiando input
                    return false;
                }
            }

            return true;
        }
        */
       /*
        function validarArchivo() {
            var archivoInput = document.getElementById('imagen');
            var archivoRuta = archivoInput.value;
            var extensionesPermitidas = /(\.jpg|\.jpeg|\.png|\.gif)$/i;

            if (!extensionesPermitidas.exec(archivoRuta)) {
                alert('Por favor, sube un archivo con una extensión válida: .jpeg/.jpg/.png/.gif.');
                archivoInput.value = '';
                return false;
            }

            return true;
        }
        */

        //Eliminar
        $(document).ready(function () {
            $('.btn-eliminar').on('click', function () {
                var Id = $(this).data('id');
                var button = $(this);

                //sweetalert2
                swal.fire({
                    title: "Eliminar Producto",
                    text: "¿Desea eliminar el producto?",
                    icon: "warning",
                    background: "#000",
                    color: "#fff",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Sí",
                    cancelButtonText: "No"
                }).then((result) => {
                    //si resultado es confirmado
                    if (result.isConfirmed) {
                        swal.fire({
                            title: "Eliminado!",
                            text: "El registro ha sido eliminado",
                            icon: "success",
                            background: "#000",
                            color: "#fff"
                        })
                        $.ajax({
                            url: '@Url.Action("Delete","Producto")',
                            type: 'POST',
                            data: { id: Id },
                            success: function (response) {
                                console.log(response);
                                if (response.success) {
                                    //efecto difuminado
                                    button.closest('tr').fadeOut('slow', function () {
                                        $(this).remove();
                                    })
                                } else {
                                    alert(`Error: ` + response.error);
                                }
                            },
                            error: function () {
                                alert('Error al intentar eliminar el producto');
                            }
                        })
                    }
                })
            })
        })
    </script>
}